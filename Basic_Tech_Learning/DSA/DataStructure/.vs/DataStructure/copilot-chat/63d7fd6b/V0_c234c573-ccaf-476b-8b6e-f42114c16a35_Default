Ü®DateTime◊ˇdkZ–f/ÆR™ThreadName¿∞CopilotSessionIdÇ§GuidŸ$c234c573-ccaf-476b-8b6e-f42114c16a35®ClientIdÅ¢IdŸ4Microsoft.VisualStudio.Conversations.Chat.HelpWindowßRequestÅßRequestïŸ$fb62a62f-cf7c-46d5-a688-f798ddc9db2dŸ$0fb5344f-b225-4141-a864-bd8b9570ed76ëÜØProviderMonikerÇ§NameŸ6Microsoft.VisualStudio.Copilot.DocumentContextProviderßVersion£0.1¶Member§file©CanReduce√©RequestIdŸ$fb62a62f-cf7c-46d5-a688-f798ddc9db2d©Reference¿•Value»  dŸëMicrosoft.VisualStudio.Copilot.DocumentContext, Microsoft.VisualStudio.Copilot, Version=0.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3aÖßContent⁄∆using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataStructure.CoreDataStructure.DataCollection.SimpleArray
{
    internal class SimpleArray
    {
        private int[]? array;
        private int[,]? twoDimArray;
        private int[,,]? threeDimArray;

        public void SimpleArrayStarter()
        {
            Console.WriteLine("Select whether you want pre-defined or user-defined array");
            Console.WriteLine("  1. Pre-defined Array \n  2. User-defined Array");
            int choice = Convert.ToInt32(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    PreDefinedArray();
                    break;

                case 2:
                    UserDefinedArray();
                    break;

                default:
                    Console.WriteLine("Invalid selection");
                    break;
            }
        }

        private void PreDefinedArray()
        {
            Console.WriteLine("Select the type of array to implement: ");
            Console.WriteLine("  1. 1-D Array \n  2. 2-D Array \n  3. 3-D Array");
            int type = Convert.ToInt32(Console.ReadLine());

            switch (type)
            {
                case 1:
                    OneDimArray();
                    break;

                case 2:
                    TwoDimArray();
                    break;

                case 3:
                    ThreeDimArray();
                    break;
            }
        }

        private void UserDefinedArray()
        {
            Console.WriteLine("Enter the size of the array: ");
            int size = Convert.ToInt32(Console.ReadLine());

            Console.WriteLine("Select the type of array to implement: ");
            Console.WriteLine("  1. 1-D Array \n  2. 2-D Array \n  3. 3-D Array");
            int type = Convert.ToInt32(Console.ReadLine());

            switch (type)
            {
                case 1:
                    OneDimArray(size);
                    break;

                case 2:
                    TwoDimArray(size);
                    break;

                case 3:
                    ThreeDimArray(size);
                    break;
            }
        }

        private void OneDimArray()
        {
            int size = 5;

            if (array == null)
            {
                array = new int[size];
            }

            for (int i = 0; i < size; i++)
            {
                array[i] = i + 1;
            }

            Console.WriteLine("The elements in the array are: ");
            for (int i = 0; i < size; i++)
            {
                Console.WriteLine(array[i]);
            }
        }

        private void OneDimArray(int size)
        {
            if (array == null)
            {
                array = new int[size];
            }

            for (int i = 0; i < size; i++)
            {
                array[i] = Convert.ToInt32(Console.ReadLine());
            }

            Console.WriteLine("The elements in the array are: ");
            for (int i = 0; i < size; i++)
            {
                Console.WriteLine(array[i]);
            }
        }

        private void TwoDimArray()
        {
            int size = 5;

            if (twoDimArray == null)
            {
                twoDimArray = new int[size, size];
            }

            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    twoDimArray[i, j] = i + j;
                }
            }

            Console.WriteLine("The elements in the 2-D array are: ");
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    Console.Write(twoDimArray[i, j] + " ");
                }
                Console.WriteLine();
            }
        }

        private void TwoDimArray(int size)
        {
            if (twoDimArray == null)
            {
                twoDimArray = new int[size, size];
            }

            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    twoDimArray[i, j] = Convert.ToInt32(Console.ReadLine());
                }
            }

            Console.WriteLine("The elements in the 2-D array are: ");
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    Console.Write(twoDimArray[i, j] + " ");
                }
                Console.WriteLine();
            }
        }

        private void ThreeDimArray()
        {
            int size = 5;

            if (threeDimArray == null)
            {
                threeDimArray = new int[size, size, size];
            }

            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    for (int k = 0; k < size; k++)
                    {
                        threeDimArray[i, j, k] = i + j + k;
                    }
                }
            }

            Console.WriteLine("The elements in the 3-D array are: ");
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    for (int k = 0; k < size; k++)
                    {
                        Console.Write(threeDimArray[i, j, k] + " ");
                    }
                    Console.WriteLine();
                }
                Console.WriteLine();
            }
        }

        private void ThreeDimArray(int size)
        {
            if (threeDimArray == null)
            {
                threeDimArray = new int[size, size, size];
            }

            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    for (int k = 0; k < size; k++)
                    {
                        threeDimArray[i, j, k] = Convert.ToInt32(Console.ReadLine());
                    }
                }
            }

            Console.WriteLine("The elements in the 3-D array are: ");
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    for (int k = 0; k < size; k++)
                    {
                        Console.Write(threeDimArray[i, j, k] + " ");
                    }
                    Console.WriteLine();
                }
                Console.WriteLine();
            }
        }

        private void OperationStarter()
        {
            Console.WriteLine("Select the operation you want to perform: ");
            Console.WriteLine("  1. Insert \n  2. Delete \n  3. Update \n  4. Search \n  0. To End");
            int operation = Convert.ToInt32(Console.ReadLine());

            switch (operation)
            {
                case 1:
                    InsertOperation();
                    break;

                case 2:
                    DeleteOperation();
                    break;

                case 3:
                    UpdateOperation();
                    break;

                case 4:
                    SearchOperation();
                    break;

                case 0:
                    break;

                default:
                    Console.WriteLine("Invalid selection");
                    break;
            }
        }
    }
}ØOriginalContent¿™SelectionsëÉ•Caret¿•StartÕV£EndÕ±®FilePathŸoD:\Project\Basic_Tech_Learning\DSA\DataStructure\DataStructure\BasicDataStructure\DataCollection\SimpleArray.cs®Language¢C#ëíìÅ•Value Ÿ*how to repeate this until user says to end¿®ResponseÖßContent⁄You can achieve this by using a `while` loop. The loop will continue to run until the user enters `0` to end the operation. Here's how you can modify your code:

```C#
int operation;
do
{
    Console.WriteLine("Select the operation you want to perform: ");
    Console.WriteLine("  1. Insert \n  2. Delete \n  3. Update \n  4. Search \n  0. To End");
    operation = Convert.ToInt32(Console.ReadLine());

    switch (operation)
    {
        case 1:
            InsertOperation();
            break;

        case 2:
            DeleteOperation();
            break;

        case 3:
            UpdateOperation();
            break;

        case 4:
            SearchOperation();
            break;

        case 0:
            break;

        default:
            Console.WriteLine("Invalid selection");
            break;
    }
} while (operation != 0);
```

In this code, the `do-while` loop will continue to execute as long as the user does not enter `0`. When `0` is entered, the condition `operation != 0` becomes false, and the loop ends.§Type ¶StatusØFollowUpPromptsíŸUHow can I handle exceptions if the user enters a non-integer value for the operation?Ÿ3Can I add more operations to this switch statement?≥CodeVulnerabilitiesê∂LoggedSkillInvocations¿